AWSTemplateFormatVersion: 2010-09-09
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaFullAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "lambda1"
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.12
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
            import json
            def lambda_handler(event, context):
                print("I am in Lambda1!")

  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "lambda2"
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.12
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
            import json
            def lambda_handler(event, context):
                print("I am in Lambda2!")

  LambdaFunction3:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "lambda3"
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.12
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
            import json
            def lambda_handler(event, context):
                print("I am in Lambda3!")
